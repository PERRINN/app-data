-- Generated by Oracle SQL Developer Data Modeler 4.1.3.901
--   at:        2016-09-03 22:06:09 CEST
--   site:      Oracle Database 10g
--   type:      Oracle Database 10g




CREATE USER perrapp IDENTIFIED BY ACCOUNT UNLOCK ;

CREATE TABLE perrapp.activity
  (
    id INTEGER NOT NULL ,
    creation_date UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    content VARCHAR2 (255) NOT NULL ,
    author  INTEGER NOT NULL ,
    team_id INTEGER NOT NULL
  )
  LOGGING ;
ALTER TABLE perrapp.activity ADD CONSTRAINT activity_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.activity_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,creation_date UNKNOWN NOT NULL
 ,content VARCHAR2 (255) NOT NULL
 ,author INTEGER NOT NULL
 ,team_id INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.activity_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.activity for each row 
 Declare 
  rec perrapp.activity_JN%ROWTYPE; 
  blank perrapp.activity_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.creation_date := :NEW.creation_date; 
      rec.content := :NEW.content; 
      rec.author := :NEW.author; 
      rec.team_id := :NEW.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.creation_date := :OLD.creation_date; 
      rec.content := :OLD.content; 
      rec.author := :OLD.author; 
      rec.team_id := :OLD.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.activity_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.city
  (
    id        INTEGER NOT NULL ,
    country   INTEGER NOT NULL ,
    region    INTEGER NOT NULL ,
    city_name VARCHAR2 (255) NOT NULL
  ) ;
CREATE INDEX perrapp.ix_city_001 ON perrapp.city
  ( city_name ASC
  ) ;
ALTER TABLE perrapp.city ADD CONSTRAINT city_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.city_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,country INTEGER NOT NULL
 ,region INTEGER NOT NULL
 ,city_name VARCHAR2 (255) NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.city_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.city for each row 
 Declare 
  rec perrapp.city_JN%ROWTYPE; 
  blank perrapp.city_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.country := :NEW.country; 
      rec.region := :NEW.region; 
      rec.city_name := :NEW.city_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.country := :OLD.country; 
      rec.region := :OLD.region; 
      rec.city_name := :OLD.city_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.city_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.country
  (
    id            INTEGER NOT NULL ,
    country_code  CHAR (5) NOT NULL ,
    country_name  VARCHAR2 (255) NOT NULL ,
    has_division  SMALLINT NOT NULL ,
    division_name VARCHAR2 (255)
  ) ;
CREATE UNIQUE INDEX perrapp.ix_country_001 ON perrapp.country
  (
    country_code ASC
  )
  ;
  CREATE INDEX perrapp.ix_country_002 ON perrapp.country
    ( country_name ASC
    ) ;
ALTER TABLE perrapp.country ADD CONSTRAINT country_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.country_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,country_code CHAR (5) NOT NULL
 ,country_name VARCHAR2 (255) NOT NULL
 ,has_division SMALLINT NOT NULL
 ,division_name VARCHAR2 (255)
 );

CREATE OR REPLACE TRIGGER perrapp.country_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.country for each row 
 Declare 
  rec perrapp.country_JN%ROWTYPE; 
  blank perrapp.country_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.country_code := :NEW.country_code; 
      rec.country_name := :NEW.country_name; 
      rec.has_division := :NEW.has_division; 
      rec.division_name := :NEW.division_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.country_code := :OLD.country_code; 
      rec.country_name := :OLD.country_name; 
      rec.has_division := :OLD.has_division; 
      rec.division_name := :OLD.division_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.country_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.devicetype
  (
    id   INTEGER NOT NULL ,
    name VARCHAR2 (255)
  )
  LOGGING ;
ALTER TABLE perrapp.devicetype ADD CONSTRAINT devicetype_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.devicetype_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,name VARCHAR2 (255)
 );

CREATE OR REPLACE TRIGGER perrapp.devicetype_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.devicetype for each row 
 Declare 
  rec perrapp.devicetype_JN%ROWTYPE; 
  blank perrapp.devicetype_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.name := :NEW.name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.name := :OLD.name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.devicetype_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.event
  (
    id UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    creation_date UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    content VARCHAR2 (255) NOT NULL ,
    "start" UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
END UNKNOWN
--  ERROR: Datatype UNKNOWN is not allowed
NOT NULL ,
author  INTEGER NOT NULL ,
team_id INTEGER NOT NULL
  )
  LOGGING ;
ALTER TABLE perrapp.event ADD CONSTRAINT event_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.event_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id UNKNOWN NOT NULL
 ,creation_date UNKNOWN NOT NULL
 ,content VARCHAR2 (255) NOT NULL
 ,start UNKNOWN NOT NULL
 ,end UNKNOWN NOT NULL
 ,author INTEGER NOT NULL
 ,team_id INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.event_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.event for each row 
 Declare 
  rec perrapp.event_JN%ROWTYPE; 
  blank perrapp.event_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.creation_date := :NEW.creation_date; 
      rec.content := :NEW.content; 
      rec.start := :NEW.start; 
      rec.end := :NEW.end; 
      rec.author := :NEW.author; 
      rec.team_id := :NEW.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.creation_date := :OLD.creation_date; 
      rec.content := :OLD.content; 
      rec.start := :OLD.start; 
      rec.end := :OLD.end; 
      rec.author := :OLD.author; 
      rec.team_id := :OLD.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.event_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.image
  (
    id INTEGER NOT NULL ,
    creation_date UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    content BLOB NOT NULL ,
    message_id     INTEGER ,
    team_member_id INTEGER NOT NULL
  )
  LOGGING ;
ALTER TABLE perrapp.image ADD CONSTRAINT images_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.image_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,creation_date UNKNOWN NOT NULL
 ,content BLOB NOT NULL
 ,message_id INTEGER
 ,team_member_id INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.image_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.image for each row 
 Declare 
  rec perrapp.image_JN%ROWTYPE; 
  blank perrapp.image_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.creation_date := :NEW.creation_date; 
      rec.content := :NEW.content; 
      rec.message_id := :NEW.message_id; 
      rec.team_member_id := :NEW.team_member_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.creation_date := :OLD.creation_date; 
      rec.content := :OLD.content; 
      rec.message_id := :OLD.message_id; 
      rec.team_member_id := :OLD.team_member_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.image_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.key
  (
    id INTEGER NOT NULL ,
    creation_date UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    mac_address VARCHAR2 (255) NOT NULL ,
    device_name VARCHAR2 (255) ,
    device_type INTEGER NOT NULL ,
    latitude UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    ,
    longitude UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    ,
    timezone  INTEGER NOT NULL ,
    member_id INTEGER NOT NULL
  )
  LOGGING ;
ALTER TABLE perrapp.key ADD CONSTRAINT key_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.key_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,creation_date UNKNOWN NOT NULL
 ,mac_address VARCHAR2 (255) NOT NULL
 ,device_name VARCHAR2 (255)
 ,device_type INTEGER NOT NULL
 ,latitude UNKNOWN
 ,longitude UNKNOWN
 ,timezone INTEGER NOT NULL
 ,member_id INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.key_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.key for each row 
 Declare 
  rec perrapp.key_JN%ROWTYPE; 
  blank perrapp.key_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.creation_date := :NEW.creation_date; 
      rec.mac_address := :NEW.mac_address; 
      rec.device_name := :NEW.device_name; 
      rec.device_type := :NEW.device_type; 
      rec.latitude := :NEW.latitude; 
      rec.longitude := :NEW.longitude; 
      rec.timezone := :NEW.timezone; 
      rec.member_id := :NEW.member_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.creation_date := :OLD.creation_date; 
      rec.mac_address := :OLD.mac_address; 
      rec.device_name := :OLD.device_name; 
      rec.device_type := :OLD.device_type; 
      rec.latitude := :OLD.latitude; 
      rec.longitude := :OLD.longitude; 
      rec.timezone := :OLD.timezone; 
      rec.member_id := :OLD.member_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.key_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.link
  (
    id      INTEGER NOT NULL ,
    url     VARCHAR2 (255) NOT NULL ,
    team_id INTEGER NOT NULL
  )
  LOGGING ;
ALTER TABLE perrapp.link ADD CONSTRAINT link_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.link_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,url VARCHAR2 (255) NOT NULL
 ,team_id INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.link_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.link for each row 
 Declare 
  rec perrapp.link_JN%ROWTYPE; 
  blank perrapp.link_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.url := :NEW.url; 
      rec.team_id := :NEW.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.url := :OLD.url; 
      rec.team_id := :OLD.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.link_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.location
  (
    id            INTEGER NOT NULL ,
    location_name VARCHAR2 (255) NOT NULL
  ) ;
CREATE INDEX perrapp.ix_location_001 ON perrapp.location
  (
    location_name ASC
  ) ;
ALTER TABLE perrapp.location ADD CONSTRAINT location_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.location_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,location_name VARCHAR2 (255) NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.location_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.location for each row 
 Declare 
  rec perrapp.location_JN%ROWTYPE; 
  blank perrapp.location_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.location_name := :NEW.location_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.location_name := :OLD.location_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.location_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.member
  (
    id        INTEGER NOT NULL ,
    firstname VARCHAR2 (255) NOT NULL ,
    surname   VARCHAR2 (255) NOT NULL ,
    birthdate UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    latitude UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    ,
    longitude UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    ,
    city_id INTEGER NOT NULL
  ) ;
ALTER TABLE perrapp.member ADD CONSTRAINT member_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.member_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,firstname VARCHAR2 (255) NOT NULL
 ,surname VARCHAR2 (255) NOT NULL
 ,birthdate UNKNOWN NOT NULL
 ,latitude UNKNOWN
 ,longitude UNKNOWN
 ,city_id INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.member_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.member for each row 
 Declare 
  rec perrapp.member_JN%ROWTYPE; 
  blank perrapp.member_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.firstname := :NEW.firstname; 
      rec.surname := :NEW.surname; 
      rec.birthdate := :NEW.birthdate; 
      rec.latitude := :NEW.latitude; 
      rec.longitude := :NEW.longitude; 
      rec.city_id := :NEW.city_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.firstname := :OLD.firstname; 
      rec.surname := :OLD.surname; 
      rec.birthdate := :OLD.birthdate; 
      rec.latitude := :OLD.latitude; 
      rec.longitude := :OLD.longitude; 
      rec.city_id := :OLD.city_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.member_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.message
  (
    id       INTEGER NOT NULL ,
    sender   INTEGER NOT NULL ,
    receiver INTEGER ,
    send_stamp UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    received SMALLINT NOT NULL ,
    msg_body BLOB ,
    team_id INTEGER
  ) ;
ALTER TABLE perrapp.message ADD CONSTRAINT message_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.message_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,sender INTEGER NOT NULL
 ,receiver INTEGER
 ,send_stamp UNKNOWN NOT NULL
 ,received SMALLINT NOT NULL
 ,msg_body BLOB
 ,team_id INTEGER
 );

CREATE OR REPLACE TRIGGER perrapp.message_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.message for each row 
 Declare 
  rec perrapp.message_JN%ROWTYPE; 
  blank perrapp.message_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.sender := :NEW.sender; 
      rec.receiver := :NEW.receiver; 
      rec.send_stamp := :NEW.send_stamp; 
      rec.received := :NEW.received; 
      rec.msg_body := :NEW.msg_body; 
      rec.team_id := :NEW.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.sender := :OLD.sender; 
      rec.receiver := :OLD.receiver; 
      rec.send_stamp := :OLD.send_stamp; 
      rec.received := :OLD.received; 
      rec.msg_body := :OLD.msg_body; 
      rec.team_id := :OLD.team_id; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.message_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.project
  (
    id            INTEGER NOT NULL ,
    project_name  VARCHAR2 (255) NOT NULL ,
    project_owner INTEGER NOT NULL
  ) ;
CREATE INDEX perrapp.ix_project_001 ON perrapp.project
  ( project_name ASC
  ) ;
ALTER TABLE perrapp.project ADD CONSTRAINT project_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.project_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,project_name VARCHAR2 (255) NOT NULL
 ,project_owner INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.project_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.project for each row 
 Declare 
  rec perrapp.project_JN%ROWTYPE; 
  blank perrapp.project_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.project_name := :NEW.project_name; 
      rec.project_owner := :NEW.project_owner; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.project_name := :OLD.project_name; 
      rec.project_owner := :OLD.project_owner; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.project_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.project_member
  (
    id      INTEGER NOT NULL ,
    project INTEGER NOT NULL ,
    member  INTEGER NOT NULL
  ) ;
ALTER TABLE perrapp.project_member ADD CONSTRAINT project_member_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.project_member_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,project INTEGER NOT NULL
 ,member INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.project_member_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.project_member for each row 
 Declare 
  rec perrapp.project_member_JN%ROWTYPE; 
  blank perrapp.project_member_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.project := :NEW.project; 
      rec.member := :NEW.member; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.project := :OLD.project; 
      rec.member := :OLD.member; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.project_member_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.project_team
  (
    id      INTEGER NOT NULL ,
    project INTEGER NOT NULL ,
    team    INTEGER NOT NULL
  ) ;
ALTER TABLE perrapp.project_team ADD CONSTRAINT project_team_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.project_team_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,project INTEGER NOT NULL
 ,team INTEGER NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.project_team_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.project_team for each row 
 Declare 
  rec perrapp.project_team_JN%ROWTYPE; 
  blank perrapp.project_team_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.project := :NEW.project; 
      rec.team := :NEW.team; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.project := :OLD.project; 
      rec.team := :OLD.team; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.project_team_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.region
  (
    id          INTEGER NOT NULL ,
    country     INTEGER NOT NULL ,
    region_name VARCHAR2 (255) NOT NULL
  ) ;
CREATE INDEX perrapp.ix_region_001 ON perrapp.region
  ( region_name ASC
  ) ;
ALTER TABLE perrapp.region ADD CONSTRAINT region_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.region_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,country INTEGER NOT NULL
 ,region_name VARCHAR2 (255) NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.region_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.region for each row 
 Declare 
  rec perrapp.region_JN%ROWTYPE; 
  blank perrapp.region_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.country := :NEW.country; 
      rec.region_name := :NEW.region_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.country := :OLD.country; 
      rec.region_name := :OLD.region_name; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.region_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.task
  (
    id         INTEGER NOT NULL ,
    project    INTEGER NOT NULL ,
    task_name  VARCHAR2 (255) NOT NULL ,
    task_owner INTEGER NOT NULL ,
    assignee   INTEGER NOT NULL ,
    assign_date UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    NOT NULL ,
    due_date UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
    ,
    "comment" UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
  ) ;
ALTER TABLE perrapp.task ADD CONSTRAINT task_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.task_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,project INTEGER NOT NULL
 ,task_name VARCHAR2 (255) NOT NULL
 ,task_owner INTEGER NOT NULL
 ,assignee INTEGER NOT NULL
 ,assign_date UNKNOWN NOT NULL
 ,due_date UNKNOWN
 ,comment UNKNOWN
 );

CREATE OR REPLACE TRIGGER perrapp.task_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.task for each row 
 Declare 
  rec perrapp.task_JN%ROWTYPE; 
  blank perrapp.task_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.project := :NEW.project; 
      rec.task_name := :NEW.task_name; 
      rec.task_owner := :NEW.task_owner; 
      rec.assignee := :NEW.assignee; 
      rec.assign_date := :NEW.assign_date; 
      rec.due_date := :NEW.due_date; 
      rec.comment := :NEW.comment; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.project := :OLD.project; 
      rec.task_name := :OLD.task_name; 
      rec.task_owner := :OLD.task_owner; 
      rec.assignee := :OLD.assignee; 
      rec.assign_date := :OLD.assign_date; 
      rec.due_date := :OLD.due_date; 
      rec.comment := :OLD.comment; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.task_JN VALUES rec; 
  END; 
  /

CREATE TABLE perapp.task_segment_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,task INTEGER NOT NULL
 ,sequence INTEGER NOT NULL
 ,comment UNKNOWN
 );

CREATE OR REPLACE TRIGGER perapp.task_segment_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perapp.task_segment for each row 
 Declare 
  rec perapp.task_segment_JN%ROWTYPE; 
  blank perapp.task_segment_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.task := :NEW.task; 
      rec.sequence := :NEW.sequence; 
      rec.comment := :NEW.comment; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.task := :OLD.task; 
      rec.sequence := :OLD.sequence; 
      rec.comment := :OLD.comment; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perapp.task_segment_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.team
  (
    id         INTEGER NOT NULL ,
    team_name  VARCHAR2 (255) NOT NULL ,
    team_owner INTEGER NOT NULL ,
    background INTEGER NOT NULL ,
    address    VARCHAR2 (255) ,
    status     VARCHAR2 (255)
  ) ;
CREATE INDEX perrapp.ix_team_001 ON perrapp.team
  ( team_name ASC
  ) ;
ALTER TABLE perrapp.team ADD CONSTRAINT team_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.team_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,team_name VARCHAR2 (255) NOT NULL
 ,team_owner INTEGER NOT NULL
 ,background INTEGER NOT NULL
 ,address VARCHAR2 (255)
 ,status VARCHAR2 (255)
 );

CREATE OR REPLACE TRIGGER perrapp.team_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.team for each row 
 Declare 
  rec perrapp.team_JN%ROWTYPE; 
  blank perrapp.team_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.team_name := :NEW.team_name; 
      rec.team_owner := :NEW.team_owner; 
      rec.background := :NEW.background; 
      rec.address := :NEW.address; 
      rec.status := :NEW.status; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.team_name := :OLD.team_name; 
      rec.team_owner := :OLD.team_owner; 
      rec.background := :OLD.background; 
      rec.address := :OLD.address; 
      rec.status := :OLD.status; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.team_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.team_member
  (
    id             INTEGER NOT NULL ,
    team           INTEGER NOT NULL ,
    member         INTEGER NOT NULL ,
    location_share SMALLINT NOT NULL ,
    leader         SMALLINT NOT NULL
  ) ;
ALTER TABLE perrapp.team_member ADD CONSTRAINT team_member_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.team_member_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,team INTEGER NOT NULL
 ,member INTEGER NOT NULL
 ,location_share SMALLINT NOT NULL
 ,leader SMALLINT NOT NULL
 );

CREATE OR REPLACE TRIGGER perrapp.team_member_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.team_member for each row 
 Declare 
  rec perrapp.team_member_JN%ROWTYPE; 
  blank perrapp.team_member_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.team := :NEW.team; 
      rec.member := :NEW.member; 
      rec.location_share := :NEW.location_share; 
      rec.leader := :NEW.leader; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.team := :OLD.team; 
      rec.member := :OLD.member; 
      rec.location_share := :OLD.location_share; 
      rec.leader := :OLD.leader; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.team_member_JN VALUES rec; 
  END; 
  /
CREATE TABLE perrapp.timezone
  (
    id INTEGER NOT NULL ,
    delta_time UNKNOWN
    --  ERROR: Datatype UNKNOWN is not allowed
  )
  LOGGING ;
ALTER TABLE perrapp.timezone ADD CONSTRAINT timezone_PK PRIMARY KEY ( id ) ;


CREATE TABLE perrapp.timezone_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,id INTEGER NOT NULL
 ,delta_time UNKNOWN
 );

CREATE OR REPLACE TRIGGER perrapp.timezone_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON perrapp.timezone for each row 
 Declare 
  rec perrapp.timezone_JN%ROWTYPE; 
  blank perrapp.timezone_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.id := :NEW.id; 
      rec.delta_time := :NEW.delta_time; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.id := :OLD.id; 
      rec.delta_time := :OLD.delta_time; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into perrapp.timezone_JN VALUES rec; 
  END; 
  /
ALTER TABLE perrapp.activity ADD CONSTRAINT fk_activity_team FOREIGN KEY ( team_id ) REFERENCES perrapp.team ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.activity ADD CONSTRAINT fk_activity_team_member FOREIGN KEY ( author ) REFERENCES perrapp.team_member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.city ADD CONSTRAINT fk_city_001 FOREIGN KEY ( country ) REFERENCES perrapp.country ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.city ADD CONSTRAINT fk_city_002 FOREIGN KEY ( region ) REFERENCES perrapp.region ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.event ADD CONSTRAINT fk_event_team FOREIGN KEY ( team_id ) REFERENCES perrapp.team ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.event ADD CONSTRAINT fk_event_team_member FOREIGN KEY ( author ) REFERENCES perrapp.team_member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.image ADD CONSTRAINT fk_image_message FOREIGN KEY ( message_id ) REFERENCES perrapp.message ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.image ADD CONSTRAINT fk_image_team_member FOREIGN KEY ( team_member_id ) REFERENCES perrapp.team_member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.key ADD CONSTRAINT fk_key_devicetype FOREIGN KEY ( device_type ) REFERENCES perrapp.devicetype ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.key ADD CONSTRAINT fk_key_member FOREIGN KEY ( member_id ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.key ADD CONSTRAINT fk_key_timezone FOREIGN KEY ( timezone ) REFERENCES perrapp.timezone ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.link ADD CONSTRAINT fk_link_team FOREIGN KEY ( team_id ) REFERENCES perrapp.team ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.member ADD CONSTRAINT fk_member_city FOREIGN KEY ( city_id ) REFERENCES perrapp.city ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.message ADD CONSTRAINT fk_message_001 FOREIGN KEY ( sender ) REFERENCES perrapp.team_member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.message ADD CONSTRAINT fk_message_001v1 FOREIGN KEY ( receiver ) REFERENCES perrapp.team_member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.message ADD CONSTRAINT fk_message_team FOREIGN KEY ( team_id ) REFERENCES perrapp.team ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.project ADD CONSTRAINT fk_project_001 FOREIGN KEY ( project_owner ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.project_member ADD CONSTRAINT fk_project_member_001 FOREIGN KEY ( project ) REFERENCES perrapp.project ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.project_member ADD CONSTRAINT fk_project_member_002 FOREIGN KEY ( member ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.task ADD CONSTRAINT fk_task_001 FOREIGN KEY ( project ) REFERENCES perrapp.project ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.task ADD CONSTRAINT fk_task_002 FOREIGN KEY ( task_owner ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.task ADD CONSTRAINT fk_task_003 FOREIGN KEY ( assignee ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.team ADD CONSTRAINT fk_team_001 FOREIGN KEY ( team_owner ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.team ADD CONSTRAINT fk_team_image FOREIGN KEY ( background ) REFERENCES perrapp.image ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.team_member ADD CONSTRAINT fk_team_member_001 FOREIGN KEY ( team ) REFERENCES perrapp.team ( id ) NOT DEFERRABLE ;

ALTER TABLE perrapp.team_member ADD CONSTRAINT fk_team_member_002 FOREIGN KEY ( member ) REFERENCES perrapp.member ( id ) NOT DEFERRABLE ;


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            19
-- CREATE INDEX                             7
-- ALTER TABLE                             45
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              1
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                  17
-- WARNINGS                                 0
